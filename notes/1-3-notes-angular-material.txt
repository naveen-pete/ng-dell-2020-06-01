Angular Material - 3
--------------------
(Training - New, Current, Past)

1. Add Tabs to TrainingComponent

  - Material Module
    - Import MatTabsModule

  - training.component.html
  
    <mat-tab-group>
      <mat-tab label="New Exercise">
        <app-new-training></app-new-training>
      </mat-tab>
      <mat-tab label="Past Exercises">
        <app-past-trainings></app-past-trainings>
      </mat-tab>
    </mat-tab-group>

------------------------------------------
2. New Training Component ()
  
  - Material Module
    - Import MatCardModule
    
  - Add a card to new-training.component.html
  
    <section class="new-training">
      <mat-card>
        <mat-card-title>Time to start a workout!</mat-card-title>

        <mat-card-content>
          Select a training
        </mat-card-content>

        <mat-card-actions>
          <button type="submit" mat-button>Start</button>
        </mat-card-actions>
      </mat-card>
    </section>
    
  - Set card width to 400px by default, set width to 100% for small screens
    
    <section class="new-training" fxLayout>
      <mat-card fxFlex.xs="100%" fxFlex="400px">
        ...
      </mat-card>
    </section>
    
  - Center align the card on the screen 
  
    <section class="new-training" fxLayout fxLayoutAlign="center">
      ...
    </section>

------------------------------------------
3. Add Dropdown List

  - Material Module
    - Import MatSelectModule
    
  - new-training.component.html

    <mat-card-content>
      <mat-form-field>
        <mat-select placeholder="Choose an exercise">
          <mat-option value="push-up">
            Push Up
          </mat-option>
          <mat-option value="squat">
            Squat
          </mat-option>
          <mat-option value="plank">
            Plank
          </mat-option>
          <mat-option value="triceps">
            Triceps
          </mat-option>
          <mat-option value="lunge">
            Lunge
          </mat-option>
        </mat-select>
      </mat-form-field>
    </mat-card-content>

  - Center align card title, content and actions - fxLayoutAlign="center"
  
  - CSS - add padding to the <section> tag
  
    .new-training{
      padding: 30px 0;
    }

------------------------------------------
4. Implement 'Start Training' feature

  - new-training.component.ts 
  
    - Add a custom event
  
        @Output() trainingStart = new EventEmitter<void>();
      
    - Add an event handler for 'Start' button click event

        onStartTraining() {
          this.trainingStart.emit();
        }
  
  - new-training.component.html
  
    - Bind the event handler to Start button click event 
    
  - training.component.ts - add a boolean property
      
      ongoingTraining = false; 

  - training.component.html
    - Bind trainingStart event to update ongoingTraining property
    
    - Hide tab group when ongoingTraining is false
    
        <mat-tab-group *ngIf="!ongoingTraining">
          ...
        <mat-tab-group>
      
    - Include CurrentTraining component below <mat-tab-group> tag. Show this component when ongoingTraining is true
    
        <app-current-training *ngIf="ongoingTraining"></app-current-training>

------------------------------------------
5. CurrentTraining component

  - Material Module
    - Import MatProgressSpinnerModule
    
  - current-training.component.html
    
      <section class="current-training" fxLayout="column" fxLayoutAlign="center center">
        <mat-progress-spinner mode="determinate" [value]="progress"></mat-progress-spinner>
        <h1>{{ progress }}%</h1>
        <p>Keep on going, you can do it!</p>
        <button mat-raised-button color="accent" (click)="onStop()">Stop</button>
      </section>
      
  - CSS

      .current-training {
        padding: 30px 0;
      }

  - current-training.component.ts
  
    - Incluse progress and number properties
    
        progress = 0;
        timer: number;
        
    - Implement OnInit interface
    
        ngOnInit() {
          this.timer = window.setInterval(() => {
            this.progress = this.progress + 10;
            if (this.progress >= 100) {
              clearInterval(this.timer);
            }
          }, 1000);
        }
        
    - Implement Stop button click event handler
    
        onStop() {
          clearInterval(this.timer);
        }
        
------------------------------------------
6. Cancel Training feature - Show dialog

  - Material Module
    - Import MatDialogModule

  - Create stop-training component
    - ng g c training/stop-training --module app.module
    
  - stop-training.component.html
  
      <h1 mat-dialog-title>Are you sure?</h1>
      <mat-dialog-actions>
        <button mat-button [mat-dialog-close]="true">Yes</button>
        <button mat-button [mat-dialog-close]="false">No</button>
      </mat-dialog-actions>
      
  - App Module
    - Add StopTrainingComponent to entryComponents array within @NgModule() decorator

  - current-training.component.ts
    - Import StopTrainingComponent
    - Inject MatDialog into the constructor
    
    - Update onStop() event handler to invoke the dialog
    
        this.dialog.open(StopTrainingComponent);
        
------------------------------------------
7. Cancel Training feature - Passing data into dialog

  - current-training.component.ts - onStop() event handler

    - dialog.open() - Pass second parameter to pass data to dialog component 
  
        this.dialog.open(StopTrainingComponent, {
          data: {
            progress: this.progress
          }
        });
        
  - stop-training.component.ts
  
      import { MAT_DIALOG_DATA } from '@angular/material/dialog';
      
      constructor(@Inject(MAT_DIALOG_DATA) public data: any) { }
      
  - stop-training.component.html
  
      <mat-dialog-content>
        <p>You already got {{ data.progress }}%</p>
      </mat-dialog-content>

------------------------------------------
8. Cancel Training feature - Receiving data from dialog

  - current-training.component.ts - onStop() event handler
 
    const dialogRef = this.dialog.open(StopTrainingComponent, {
      data: {
        progress: this.progress
      }
    });

    dialogRef.afterClosed().subscribe(result => {
      console.log(result);
    });

------------------------------------------
9. Cancel Training feature - Exit & Resume Training
  
  - current-training.component.ts
  
    - Introduce a custom event
    
        @Output() trainingExit = new EventEmitter<void>();
      
    - Refactor ngOnInit(), introduce startOrResumeTimer() method

        ngOnInit() {
          this.startOrResumeTimer();
        }

        startOrResumeTimer() {
          this.timer = window.setInterval(() => {
            this.progress = this.progress + 10;
            if (this.progress >= 100) {
              clearInterval(this.timer);
              this.trainingExit.emit();
            }
          }, 1000);
        }
        
    - Update onStop() method
    
        dialogRef.afterClosed().subscribe(result => {
          if (result) {
            this.trainingExit.emit();
          } else {
            this.startOrResumeTimer();
          }
        });
