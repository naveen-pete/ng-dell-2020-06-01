Angular PWA - 1
---------------

1. Introduction
  
  - PWA - a standard web app with native like capabilities
  - Supported by browsers like Safari, Edge

-------------------------------------------------------------------  
2. How to convert an Angular App into a PWA?
  - Run this command inside your Angular app folder
    - ng add @angular/pwa
    
  - Observe the changes to the project
    - angular.json
    - ngsw-config.json
    - package.json
    - index.html
    - manifest.webmanifest
    - app.module.ts
    - assets folder
    
  - Create build
    - ng build --prod
    
  - Observe build output

-------------------------------------------------------------------    
3. Run Angular App
  - Install http-server
    - npm i -g http-server
    
  - Navigate into dist folder and start http-server
    - http-server
    
  - In the browser window, check Application tab within Developer Tools
    - Service Workers
    - Cache Storage
    - Goto Network tab
      - Choose All requests
      - Refresh the current screen
      - Observe Size column
        - Requests with (ServiceWorker) are loaded from local cache
    - Shut down http server and observe the app behavior
    
-------------------------------------------------------------------
4. How does Service Worker work?
  - A service worker is a network level http interception proxy
  - JS script

-------------------------------------------------------------------
5. SW version management
  - Make a change to app code
  - Build the app
  - Refresh the browser window - 2 times
  
  - Programmatically check for new version
  
    - App Component
    
        ngOnInit() {
          if (this.swUpdate.isEnabled) {
            this.swUpdate.available.subscribe(
              () => {
                if (window.confirm('New version available. Load new version?')) {
                  window.location.reload();
                }
              }
            );
          }

          this.authService.autoLogin();
        }

-------------------------------------------------------------------
6. Dropping Service Worker from build
  - angular.json
    - Change following configuration
    
      "serviceWorker": false

-------------------------------------------------------------------
7. Caching REST API data

  - ngsw-config.json

    a. Cache Strategy - Performance (Cache First, Network Last)

          "dataGroups": [
            {
              "name": "available-exercises",
              "urls": [
                "/**/*available-exercises*"
              ],
              "cacheConfig": {
                "strategy": "performance",
                "maxAge": "1m", // How long data should be cached?
                "maxSize": 1    // How many requests to cache?
              }
            },
            {
              "name": "finished-exercises",
              "urls": [
                "/**/*finished-exercises*"
              ],
              "cacheConfig": {
                "strategy": "performance",
                "maxAge": "1m", // How long data should be cached?
                "maxSize": 1    // How many requests to cache?
              }
            }
          ]

    b. Cache Strategy - Freshness (Network First, Cache Last)

          "dataGroups": [
            {
              "name": "available-exercises",
              "urls": [
                "/**/*available-exercises*"
              ],
              "cacheConfig": {
                "strategy": "freshness",
                "timeout": "10s", // How long to wait for a server response?
                "maxAge": "10m",  // How long data should be cached?
                "maxSize": 1      // How many requests to cache?
              }
            },
            {
              "name": "finished-exercises",
              "urls": [
                "/**/*finished-exercises*"
              ],
              "cacheConfig": {
                "strategy": "freshness",
                "timeout": "10s", // How long to wait for a server response?
                "maxAge": "10m",  // How long data should be cached?
                "maxSize": 1      // How many requests to cache?
              }
            }
          ]

-------------------------------------------------------------------
8. Install PWA
  - App Manifest file
    - Installing PWA on your device (laptop)
    - Uninstalling PWA from your device (laptop)

-------------------------------------------------------------------
9. App Shell

  - Scaffolding an Angular Universal Application
    
      ng generate app-shell
      
    - Observe the changes to the project
    
      - angular.json
        - server
        - app-shell
        
      - package.json
        - @angular/platform-server
        
      - tsconfig.server.json
      
      - main.server.ts (src folder)
      
      - main.ts
      
      - AppModule
      
      - AppServerModule
      
      - AppShellComponent
  
  - App Component changes
    
    - Import Inject and PLATFORM_ID from '@angular/core' package
    - Import isPlatformBrowser from '@angular/common' package
    
        import { Component, OnInit, Inject, PLATFORM_ID } from '@angular/core';
        import { isPlatformBrowser } from "@angular/common";
        
    - Inject platform id into the constructor
    
        constructor(
          private authService: AuthService,
          @Inject(PLATFORM_ID) private platformId: any
        ) { }

    - Update ngOnInit() to invoke AuthService.autoLogin() only on the browser
    
        ngOnInit() {
          if (isPlatformBrowser(this.platformId)) {
            this.authService.autoLogin();
          }

          console.log('AppComponent.ngOnInit() invoked.');
        }

  
  - Build the app
  
    - ng run fitness-app:app-shell:production
    
  - Observe index.html content.
  - Profile the app using Chrome developer tools

-------------------------------------------------------------------
10. Push Notifications

  - Generating a VAPID key pair using node web-push
  
      npm install web-push -g
      
      web-push generate-vapid-keys --json
      
      {
        "publicKey":"BC506Dc3cB1qO-5WDIbUZG9AUiiCERMBrR_8hjQAYcoGDNDB8Dej8j4Yt0XMVXUe5IRZ7BE78UGGtyVGsBWhoB4",
        "privateKey":"pIkw-QWo7toQlyrfi8BmhrFvY8HEAx4m-8A1N3Acc70"
      }
      